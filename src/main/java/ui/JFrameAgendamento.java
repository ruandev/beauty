/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.AgendamentoModel;
import model.ClienteModel;
import model.FuncionarioModel;
import model.ServicoModel;
import model.ServicosAgendamentoModel;
import net.sf.jasperreports.engine.JRException;
import repository.AgendamentoRepository;
import repository.ClienteRepository;
import repository.FuncionarioRepository;
import repository.ServicosAgendamentoRepository;
import repository.ServicosRepository;
import utils.JasperGenerate;
import utils.Mascaras;
import utils.Utils;

/**
 *
 * @author skate
 */
public class JFrameAgendamento extends javax.swing.JFrame {

    List<ClienteModel> listClientes;
    List<FuncionarioModel> listFuncionarios;
    List<ServicoModel> listServicos;
    List<ServicosAgendamentoModel> listServicosSelecionados, listServicosEdicao;
    AgendamentoRepository repository;
    ServicosAgendamentoRepository servicoAgendamentoRepository;
    AgendamentoModel agendamento;
    private Long codigo;

    /**
     * Creates new form JFrameAgendamento
     */
    public JFrameAgendamento() {
        initComponents();
        repository = new AgendamentoRepository();
        servicoAgendamentoRepository = new ServicosAgendamentoRepository();
        listServicosSelecionados = new ArrayList<>();
        this.preencheClientes();
        this.preencheFuncionarios();
        this.preencheServicos();
        this.preencheConsulta();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        abasPanel = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboCliente = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        campoDataHoraAgenda = new org.jdesktop.swingx.JXDatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaServicosAgendamento = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        campoHora = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        comboFuncionario = new javax.swing.JComboBox<>();
        comboServico = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        campoValor = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        campoObs = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaConsulta = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        btnGravar = new javax.swing.JButton();
        btnNovo = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Atendimento");
        setExtendedState(6);

        abasPanel.setBackground(new java.awt.Color(255, 204, 255));
        abasPanel.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        abasPanel.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 20)); // NOI18N
        abasPanel.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(255, 204, 255));

        jLabel1.setBackground(new java.awt.Color(231, 32, 83));
        jLabel1.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText(" Nome Cliente*");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel1.setOpaque(true);

        jLabel2.setBackground(new java.awt.Color(231, 32, 83));
        jLabel2.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText(" Data*");
        jLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel2.setOpaque(true);

        campoDataHoraAgenda.setFormats("dd/MM/yyyy");

        tabelaServicosAgendamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serviço", "Funcionario"
            }
        ));
        tabelaServicosAgendamento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaServicosAgendamentoKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaServicosAgendamento);

        jLabel4.setBackground(new java.awt.Color(231, 32, 83));
        jLabel4.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText(" Hora*");
        jLabel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel4.setOpaque(true);

        try {
            campoHora.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(231, 32, 83));
        jLabel5.setText("SELECIONE O SERVIÇO E PRESSIONE [DELETE] PARA EXCLUIR O SERVIÇO DA LISTA");

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setBackground(new java.awt.Color(231, 32, 83));
        jLabel3.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText(" Serviço");
        jLabel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel3.setOpaque(true);

        comboServico.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboServicoItemStateChanged(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(231, 32, 83));
        jLabel6.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText(" Funcionário");
        jLabel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel6.setOpaque(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(231, 32, 83));
        jLabel8.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText(" Valor");
        jLabel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel8.setOpaque(true);

        campoValor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                campoValorFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 28, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboServico, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoValor, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboServico, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(campoValor, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        campoObs.setColumns(20);
        campoObs.setRows(5);
        jScrollPane3.setViewportView(campoObs);

        jLabel7.setBackground(new java.awt.Color(231, 32, 83));
        jLabel7.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText(" Obs");
        jLabel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel7.setOpaque(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(campoDataHoraAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(campoHora))
                    .addComponent(jLabel5)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(comboCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                        .addComponent(campoDataHoraAgenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(campoHora, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        abasPanel.addTab("Agendar", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 204, 255));

        tabelaConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelaConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaConsultaMouseClicked(evt);
            }
        });
        tabelaConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaConsultaKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaConsulta);

        jLabel15.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(231, 32, 83));
        jLabel15.setText("Clique duas vezes na linha que deseja editar ou consultar");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addContainerGap())
        );

        abasPanel.addTab("Consulta", jPanel3);

        btnGravar.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 18)); // NOI18N
        btnGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        btnGravar.setText("Gravar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        btnNovo.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 18)); // NOI18N
        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.png"))); // NOI18N
        btnNovo.setText("Novo");
        btnNovo.setEnabled(false);
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnImprimir.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 18)); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.setEnabled(false);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 18)); // NOI18N
        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/excluir (2).png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setEnabled(false);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abasPanel)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(abasPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 655, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        setSize(new java.awt.Dimension(980, 797));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaServicosAgendamentoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaServicosAgendamentoKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir o serviço do agendamento?", "Galera de casa aí, comé que é, meu", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (dialogResult == JOptionPane.YES_OPTION) {
                System.out.println("ID Serv: " + tabelaServicosAgendamento.getValueAt(tabelaServicosAgendamento.getSelectedRow(), 2).toString());
                listServicosSelecionados.removeIf((s -> s.getId().equals(Long.parseLong(tabelaServicosAgendamento.getValueAt(tabelaServicosAgendamento.getSelectedRow(), 2).toString()))));
                this.preencherTabelaServico();
            }
        }
    }//GEN-LAST:event_tabelaServicosAgendamentoKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (comboServico.getSelectedIndex() < 1) {
            JOptionPane.showMessageDialog(this, "Selecione um serviço!", "Errrrôôôôôuuuu!", JOptionPane.ERROR_MESSAGE);
        } else if((campoValor.getText() == null || campoValor.getText().equals(new Double(0)))) {
            JOptionPane.showMessageDialog(this, "Digite o valor!", "Errrrôôôôôuuuu!", JOptionPane.ERROR_MESSAGE);
        } else {
            if (comboFuncionario.getSelectedIndex() < 1) {
                listServicosSelecionados.add(
                        ServicosAgendamentoModel.builder()
                                .servico(listServicos.get(comboServico.getSelectedIndex() - 1))
                                .valor(Mascaras.converteDouble(campoValor.getText()))
                                .build());
            } else {
                listServicosSelecionados.add(
                        ServicosAgendamentoModel.builder()
                                .servico(listServicos.get(comboServico.getSelectedIndex() - 1))
                                .funcionario(listFuncionarios.get(comboFuncionario.getSelectedIndex() - 1))
                                .valor(Mascaras.converteDouble(campoValor.getText()))
                                .build());
            }
        }
        comboServico.setSelectedIndex(0);
        comboFuncionario.setSelectedIndex(0);
        campoValor.setText(null);
        this.preencherTabelaServico();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tabelaConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaConsultaMouseClicked
        if (evt.getClickCount() == 2) {
            this.preencherCampos();
        }
    }//GEN-LAST:event_tabelaConsultaMouseClicked

    private void tabelaConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaConsultaKeyReleased

    }//GEN-LAST:event_tabelaConsultaKeyReleased

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        try {
            if (comboCliente.getSelectedIndex() < 0 || campoDataHoraAgenda.getDate() == null || campoHora.getText().equals("  :  ")) {
                JOptionPane.showMessageDialog(this, "Todos os campos com * (asterisco) são obrigatórios", "Errrrôôôôôuuuu!", JOptionPane.ERROR_MESSAGE);
            } else {
                this.buildAgendamento();

                if (codigo != null) {
                    agendamento.setId(codigo);
                    this.repository.alterarAgendamento(agendamento);
                    if (listServicosEdicao != null && !listServicosEdicao.isEmpty()) {
                        List<ServicosAgendamentoModel> servicosRemovidos = listServicosEdicao.stream().filter(e -> (listServicosSelecionados.stream().filter(d -> (d.getServico().getId().equals(e.getServico().getId())) && d.getFuncionario().getId().equals(e.getFuncionario().getId())).count()) < 1).collect(Collectors.toList());
                        List<ServicosAgendamentoModel> servicosAdicionados = listServicosSelecionados.stream().filter(e -> (listServicosEdicao.stream().filter(d -> (d.getServico().getId().equals(e.getServico().getId())) && d.getFuncionario().getId().equals(e.getFuncionario().getId())).count()) < 1).collect(Collectors.toList());

                        servicosRemovidos.forEach(servico -> {
                            try {
                                servico.setAgendamento(agendamento);
                                servicoAgendamentoRepository.delete(servico);
                            } catch (SQLException ex) {
                                System.out.println("Remover serviços: " + ex);
                                Logger.getLogger(JFrameAgendamento.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        });
                        servicosAdicionados.forEach(servico -> {
                            try {
                                servico.setAgendamento(agendamento);
                                servicoAgendamentoRepository.save(servico);
                            } catch (SQLException ex) {
                                System.out.println("Adicionar serviços: " + ex);
                                Logger.getLogger(JFrameAgendamento.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        });
                    } else {
                        this.salvarServicos();
                    }
                } else {
                    agendamento = this.repository.agendar(agendamento);
                    this.salvarServicos();
                }
                this.preencheConsulta();
                btnNovo.setEnabled(true);
                btnImprimir.setEnabled(true);
                btnExcluir.setEnabled(true);
                codigo = agendamento.getId();
                JOptionPane.showMessageDialog(this, "Atendimento salvo com sucesso!", "Quem sabe faz ao vivo!", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (HeadlessException | SQLException ex) {
            System.out.println(ex);
            JOptionPane.showMessageDialog(this, "Ocorreu um erro ao tentar salvar o Atendimento", "Errrrôôôôôuuuu!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        this.limparCampos();
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        Map parametros = new HashMap();
        parametros.put("agendamento", codigo);
        try {
            new JasperGenerate().gerar("/reports/Recibo.jasper", parametros, "Ficha/Recibo do Atendimento");
        } catch (JRException | SQLException | ClassNotFoundException ex) {
            Logger.getLogger(JFrameAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir o atendimento?", "Galera de casa aí, comé que é, meu?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                repository.delete(agendamento);
                this.limparCampos();
                this.preencheConsulta();
                listServicosSelecionados = new ArrayList<>();
                this.preencherTabelaServico();
                JOptionPane.showMessageDialog(this, "Atendimento excluído com sucesso!", "Quem sabe faz ao vivo!", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(this, "Ocorreu um erro ao tentar excluir o Atendimento", "Errrrôôôôôuuuu!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void campoValorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_campoValorFocusLost
        try {
            double valor = Mascaras.converteDouble(campoValor.getText());
            campoValor.setText(Mascaras.monetario.format(valor));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Valor Inválido!", "Errrrôôôôôuuuu!", JOptionPane.ERROR_MESSAGE);
            campoValor.setText("");
            campoValor.requestFocus();
        }
    }//GEN-LAST:event_campoValorFocusLost

    private void comboServicoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboServicoItemStateChanged
        if(comboServico.getSelectedIndex() > 0){
            campoValor.setText(listServicos.get(comboServico.getSelectedIndex() - 1).getValor().toString().replace(".", ","));
        }
    }//GEN-LAST:event_comboServicoItemStateChanged

    private void preencheClientes() {
        ClienteRepository clienteRepository = new ClienteRepository();
        try {
            listClientes = clienteRepository.findAllCombo();
            comboCliente.addItem("...");
            listClientes.forEach((clienteUnique) -> {
                comboCliente.addItem(clienteUnique.getNome());
            });
        } catch (SQLException ex) {
            Logger.getLogger(JFrameAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void preencheFuncionarios() {
        FuncionarioRepository funcionarioRepository = new FuncionarioRepository();
        try {
            listFuncionarios = funcionarioRepository.findAllCombo();
            comboFuncionario.addItem("...");
            listFuncionarios.forEach((clienteUnique) -> {
                comboFuncionario.addItem(clienteUnique.getNome());
            });
        } catch (SQLException ex) {
            Logger.getLogger(JFrameAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void preencheServicos() {
        ServicosRepository servicoRepository = new ServicosRepository();
        try {
            listServicos = servicoRepository.findAll();
            comboServico.addItem("...");
            listServicos.forEach((servicoUnique) -> {
                comboServico.addItem(servicoUnique.getDescricao());
            });
        } catch (SQLException ex) {
            Logger.getLogger(JFrameAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void preencherTabelaServico() {
        DefaultTableModel model = new DefaultTableModel(
                new Object[][]{},
                //aqui a construï¿½ao do cabeï¿½alho
                new String[]{"", "", "", "Serviço", "Funcionário", "Valor"}) {
            Class[] types = new Class[]{
                //para cada coluna acrescentar mais um construtor
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class};
            //para cada coluna acrescentar mais um objetooo...
            boolean[] canEdit = new boolean[]{false, false, false, false, false, false};

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        //construï¿½ao do conteudo da tabela........................
        //usando o BD
        listServicosSelecionados.forEach((servicoSelecionado) -> {
            model.addRow(new Object[]{servicoSelecionado.getServico().getId(), (servicoSelecionado.getFuncionario() != null ? servicoSelecionado.getFuncionario().getId() : 0), servicoSelecionado.getId(), servicoSelecionado.getServico().getDescricao(), (servicoSelecionado.getFuncionario() != null ? servicoSelecionado.getFuncionario().getNome() : ""), Mascaras.monetario.format(servicoSelecionado.getValor())});
        });

        tabelaServicosAgendamento.setModel(model);
        tabelaServicosAgendamento.sizeColumnsToFit(10);
        tabelaServicosAgendamento.setRowHeight(20);
        tabelaServicosAgendamento.getColumnModel().getColumn(0).setResizable(false);
        tabelaServicosAgendamento.getColumnModel().getColumn(0).setWidth(0);
        tabelaServicosAgendamento.getColumnModel().getColumn(0).setPreferredWidth(0);
        tabelaServicosAgendamento.getColumnModel().getColumn(0).setMaxWidth(0);
        tabelaServicosAgendamento.getColumnModel().getColumn(0).setMinWidth(0);
        tabelaServicosAgendamento.getColumnModel().getColumn(1).setResizable(false);
        tabelaServicosAgendamento.getColumnModel().getColumn(1).setPreferredWidth(0);
        tabelaServicosAgendamento.getColumnModel().getColumn(1).setMaxWidth(0);
        tabelaServicosAgendamento.getColumnModel().getColumn(1).setMinWidth(0);
        tabelaServicosAgendamento.getColumnModel().getColumn(2).setResizable(false);
        tabelaServicosAgendamento.getColumnModel().getColumn(2).setPreferredWidth(0);
        tabelaServicosAgendamento.getColumnModel().getColumn(2).setMaxWidth(0);
        tabelaServicosAgendamento.getColumnModel().getColumn(2).setMinWidth(0);
        tabelaServicosAgendamento.getColumnModel().getColumn(3).setResizable(false);
        tabelaServicosAgendamento.getColumnModel().getColumn(3).setPreferredWidth(300);
        tabelaServicosAgendamento.getColumnModel().getColumn(3).setMaxWidth(300);
        tabelaServicosAgendamento.getColumnModel().getColumn(3).setMinWidth(300);
        tabelaServicosAgendamento.getColumnModel().getColumn(4).setResizable(false);
        tabelaServicosAgendamento.getColumnModel().getColumn(4).setPreferredWidth(300);
        tabelaServicosAgendamento.getColumnModel().getColumn(4).setMaxWidth(300);
        tabelaServicosAgendamento.getColumnModel().getColumn(4).setMinWidth(300);
        tabelaServicosAgendamento.getColumnModel().getColumn(5).setResizable(false);
        tabelaServicosAgendamento.getColumnModel().getColumn(5).setPreferredWidth(200);
        tabelaServicosAgendamento.getColumnModel().getColumn(5).setMaxWidth(200);
        tabelaServicosAgendamento.getColumnModel().getColumn(5).setMinWidth(200);
    }

    private void buildAgendamento() {
        agendamento = AgendamentoModel.builder()
                .clienteModel(listClientes.get(comboCliente.getSelectedIndex() - 1))
                .dataHora(utils.Utils.convetDateAndStringHourToLocalDateTime(campoDataHoraAgenda.getDate(), campoHora.getText()))
                .obs(campoObs.getText())
                .build();
    }

    private void limparCampos() {
        btnNovo.setEnabled(false);
        btnImprimir.setEnabled(false);
        btnExcluir.setEnabled(false);
        listServicosSelecionados = new ArrayList<>();
        comboCliente.setSelectedIndex(0);
        comboServico.setSelectedIndex(0);
        campoDataHoraAgenda.setDate(null);
        campoHora.setText(null);
        campoObs.setText(null);
        preencherTabelaServico();
    }

    private void preencheConsulta() {
        DefaultTableModel model = new DefaultTableModel(
                new Object[][]{},
                //aqui a construï¿½ao do cabeï¿½alho
                new String[]{"", "Cliente", "Data"}) {
            Class[] types = new Class[]{
                //para cada coluna acrescentar mais um construtor
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,};
            //para cada coluna acrescentar mais um objetooo...
            boolean[] canEdit = new boolean[]{false, false, false};

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        try {
            repository.findAllAgendamentos().forEach((agendamentoUnique) -> {
                model.addRow(new Object[]{agendamentoUnique.getId(), agendamentoUnique.getClienteModel().getNome(), Utils.formatLocalDateTime(agendamentoUnique.getDataHora(), "dd/MM/yyyy HH:mm")});
            });
        } catch (SQLException ex) {
            Logger.getLogger(JFrameAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }

        tabelaConsulta.setModel(model);
        tabelaConsulta.sizeColumnsToFit(10);
        tabelaConsulta.setRowHeight(20);
        tabelaConsulta.getColumnModel().getColumn(0).setResizable(false);
        tabelaConsulta.getColumnModel().getColumn(0).setPreferredWidth(0);
        tabelaConsulta.getColumnModel().getColumn(0).setMaxWidth(0);
        tabelaConsulta.getColumnModel().getColumn(0).setMinWidth(0);
        tabelaConsulta.getColumnModel().getColumn(1).setResizable(false);
        tabelaConsulta.getColumnModel().getColumn(1).setPreferredWidth(200);
        tabelaConsulta.getColumnModel().getColumn(2).setResizable(false);
        tabelaConsulta.getColumnModel().getColumn(2).setPreferredWidth(100);
    }

    private void preencherCampos() {
        abasPanel.setSelectedIndex(0);
        codigo = Long.parseLong(tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 0).toString());
        try {
            agendamento = repository.findOne(AgendamentoModel.builder().id(codigo).build());
            comboCliente.setSelectedItem(agendamento.getClienteModel().getNome());
            campoObs.setText(agendamento.getObs());
            Date data = Utils.convertLocalDateTimeToDate(agendamento.getDataHora());
            campoDataHoraAgenda.setDate(data);
            int hora = data.getHours();
            int minuto = data.getMinutes();
            String horas = (hora < 10 ? "0" + String.valueOf(hora) : String.valueOf(hora));
            String minutos = (minuto < 10 ? "0" + String.valueOf(minuto) : String.valueOf(minuto));
            String horaCompleta = horas + ":" + minutos;
            campoHora.setText(horaCompleta);
            listServicosSelecionados = new ArrayList<>();
            listServicosSelecionados.addAll(servicoAgendamentoRepository.findServicosPorAgendamento(agendamento));
            listServicosEdicao = new ArrayList<>();
            listServicosEdicao.addAll(listServicosSelecionados);
            if (!listServicosSelecionados.isEmpty()) {
                this.preencherTabelaServico();
            }
            btnNovo.setEnabled(true);
            btnImprimir.setEnabled(true);
            btnExcluir.setEnabled(true);
        } catch (SQLException ex) {
            Logger.getLogger(JFrameAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void salvarServicos() {
        listServicosSelecionados.forEach((servicoSelecionado) -> {
            try {
                servicoSelecionado.setAgendamento(agendamento);
                servicoAgendamentoRepository.save(servicoSelecionado);
            } catch (SQLException ex) {
                Logger.getLogger(JFrameAgendamento.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }
   
    private void ativarBotoes(boolean estado){
        btnGravar.setEnabled(estado);
        btnNovo.setEnabled(estado);
        btnImprimir.setEnabled(estado);
        btnExcluir.setEnabled(estado);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new JFrameAgendamento().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane abasPanel;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnNovo;
    private org.jdesktop.swingx.JXDatePicker campoDataHoraAgenda;
    private javax.swing.JFormattedTextField campoHora;
    private javax.swing.JTextArea campoObs;
    private javax.swing.JTextField campoValor;
    private javax.swing.JComboBox<String> comboCliente;
    private javax.swing.JComboBox<String> comboFuncionario;
    private javax.swing.JComboBox<String> comboServico;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tabelaConsulta;
    private javax.swing.JTable tabelaServicosAgendamento;
    // End of variables declaration//GEN-END:variables
}
